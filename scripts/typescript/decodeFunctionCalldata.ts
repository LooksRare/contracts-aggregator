// eslint-disable-next-line node/no-unpublished-import
import { ethers } from "hardhat";

async function main() {
  // buy Ledger pass from LR and OS.
  const data =
    "0x186b100c0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000dce7ed5170ac800000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000664e7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006400000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000cd980b28732be9ddfaaf2b12b292bb07ebc8688900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000002f8a004b595c4522f3b66e158facd194663f005f000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062ed49d10000000000000000000000000000000000000000000000000000000062ee9b510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fcc0e81d67bfb0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000033c6eec1723b12c46732f7ab41398de45641fa420000000000000000000000000000000000000000000000000000000000001cd000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ea5596189b400000000000000000000000000000000000000000000000000008ea5596189b40000000000000000000000000002f8a004b595c4522f3b66e158facd194663f005f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f65eed6045000000000000000000000000000000000000000000000000000003f65eed60450000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000be31cc820cf00000000000000000000000000000000000000000000000000000be31cc820cf000000000000000000000000000459fe44490075a2ec231794f9548238e99bf25c00000000000000000000000000000000000000000000000000000000000000041cae0f18298341dfef87365d09718ac803d437456e06ca2087b209879ff48f7f7105ba8ff779a6a13f8c08bba543a2aa7af40dbb23aabe8122d575e8561466a6f1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003e496582bba00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000cd980b28732be9ddfaaf2b12b292bb07ebc8688900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031837aaf36961274a04b915697fdfca1af31a0c700000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000002616000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000043ed63322703ca6249ddd5a094d9bee0a3e8aaf700000000000000000000000033c6eec1723b12c46732f7ab41398de45641fa4200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000002616000000000000000000000000000000000000000000000000000000000000000100000000000000000000000056244bb70cbd3ea9dc8007399f61dfc065190031000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000062ed39020000000000000000000000000000000000000000000000000000000062f6738100000000000000000000000000000000000000000000000000000000000021340000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001cdd6a260254d45b8aec49253d335fdecd29196d166f71678e81de007025193ab520e6886610c4fb5786dbe93abf7df8f54258239dea21a8a34d339c9817a38f790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
  const abiCoder = ethers.utils.defaultAbiCoder;

  const decoded = abiCoder.decode(
    [
      "tuple(address[], uint256[])",
      "tuple(address, address[], uint256[])[]",
      "tuple(address, uint256[], uint256[])[]",
      "tuple(bytes)[]",
      "tuple(uint256, uint256, bytes)[]",
      "address[]",
      "uint256[2]",
    ],
    ethers.utils.hexDataSlice(data, 4)
  );

  console.log(decoded);

  const openseaData = decoded[4][0][2];
  // fulfillAdvancedOrder
  // struct AdvancedOrder advancedOrder,
  // struct CriteriaResolver[] criteriaResolvers,
  // bytes32 fulfillerConduitKey,
  // address recipient
  const openseaDecoded = abiCoder.decode(
    [
      "tuple(tuple(address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[], uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)",
      "tuple(uint256,uint8,uint256,uint256,bytes32[])[]",
      "bytes32",
      "address",
    ],
    ethers.utils.hexDataSlice(openseaData, 4)
  );

  console.log(openseaDecoded);
  // console.log(openseaDecoded[0][0][2]);
  // console.log(openseaDecoded[0][0][3]);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
