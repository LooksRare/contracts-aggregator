// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {IERC721} from "@looksrare/contracts-libs/contracts/interfaces/generic/IERC721.sol";
import {ReservoirProxy} from "../../contracts/proxies/ReservoirProxy.sol";
import {LooksRareAggregator} from "../../contracts/LooksRareAggregator.sol";
import {ILooksRareAggregator} from "../../contracts/interfaces/ILooksRareAggregator.sol";
import {IProxy} from "../../contracts/interfaces/IProxy.sol";
import {BasicOrder, TokenTransfer} from "../../contracts/libraries/OrderStructs.sol";
import {InvalidOrderLength} from "../../contracts/libraries/SharedErrors.sol";
import {TestHelpers} from "./TestHelpers.sol";
import {TestParameters} from "./TestParameters.sol";

contract ReservoirProxyTest is TestParameters, TestHelpers {
    LooksRareAggregator private aggregator;
    ReservoirProxy private reservoirProxy;

    address private constant RESERVOIR_ROUTER = 0xC2c862322E9c97D6244a3506655DA95F05246Fd8;
    address private constant MILADY = 0x5Af0D9827E0c53E4799BB226655A1de152A425a5;

    function setUp() public {
        vm.createSelectFork(vm.rpcUrl("mainnet"), 17_110_030);

        aggregator = new LooksRareAggregator(address(this));
        reservoirProxy = new ReservoirProxy(RESERVOIR_ROUTER, address(aggregator));
        aggregator.addFunction(address(reservoirProxy), ReservoirProxy.execute.selector);

        vm.deal(address(aggregator), 1 wei);
    }

    function test_execute_X2Y2Orders() public {
        uint256 price = 0x02b5e3af16b1880000;
        vm.deal(_buyer, price);
        BasicOrder[] memory orders = new BasicOrder[](1);
        orders[0].price = price;
        ILooksRareAggregator.TradeData[] memory tradeData = new ILooksRareAggregator.TradeData[](1);
        tradeData[0].orders = orders;
        tradeData[0].proxy = address(reservoirProxy);
        tradeData[0].selector = ReservoirProxy.execute.selector;
        tradeData[0].extraData = _singleX2Y2OrderCalldata();

        vm.prank(_buyer);
        aggregator.execute{value: price}({
            tokenTransfers: new TokenTransfer[](0),
            tradeData: tradeData,
            originator: address(0),
            recipient: _buyer,
            isAtomic: false
        });

        assertEq(IERC721(MILADY).ownerOf(9082), _buyer);
        assertEq(IERC721(MILADY).balanceOf(_buyer), 1);
        assertEq(_buyer.balance, 0);
    }

    function test_execute_X2Y2Orders_Multiple() public {
        uint256 price = 0x030927f74c9de00000;
        vm.deal(_buyer, price);
        BasicOrder[] memory orders = new BasicOrder[](1);
        orders[0].price = price;
        ILooksRareAggregator.TradeData[] memory tradeData = new ILooksRareAggregator.TradeData[](1);
        tradeData[0].orders = orders;
        tradeData[0].proxy = address(reservoirProxy);
        tradeData[0].selector = ReservoirProxy.execute.selector;
        tradeData[0]
            .extraData = hex"760f2a0b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007562e6d5d901ece54a89530f1c8d63e7cfaeebff00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000030927f74c9de000000000000000000000000000000000000000000000000000000000000000000e840b577a2c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000038dee936aa3d8e6370524a7cba38c96a896d9d9f00000000000000000000000038dee936aa3d8e6370524a7cba38c96a896d9d9f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030927f74c9de000000000000000000000000000000000000000000000000000000000000000000e600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000069add3e83f3600000000000000000000000000000000000000000000000000000000644596db000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007562e6d5d901ece54a89530f1c8d63e7cfaeebff0000000000000000000000000000000000000000000000000000000000000000c61557415e7577dd4607d7742b519c37fa690532f7396b65c31af1087590a55b4b6268886a75245b5c3ff168c304e9e20c893bd99e49819ce386fd1901b28111000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000050f7474be388af049feedb16a559aebd00000000000000000000000049e9432f0f96bb23261c879bc8b95c46a19411580000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000064688e46000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c0e8285e3a521a0fbd24eac58b463c862d962037f4e41fc39933c18f0868b1b0d81e6e61d03652df84e42f97dad24aab3b28dcb0de442868247a5da9cf69c3569e000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000053444835ec58000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005af0d9827e0c53e4799bb226655a1de152a425a50000000000000000000000000000000000000000000000000000000000001bd90000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053444835ec5800007a66c9c98b00e6824c96ce2fcec6fe48f7d4175e184006b4e12357f0043a49da000000000000000000000000f849de01b080adc3a814fabe1e2087475cf2ed823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000034e97384d82aa00000000000000000000000000000000000000000000000000000000644596db000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007562e6d5d901ece54a89530f1c8d63e7cfaeebff00000000000000000000000000000000000000000000000000000000000000005627b5c0740fb13e578839a4080ce25ab702ea6aab8a937807b9d692f55510be28f65130bc1b0cc21388d67a0f0fd0d5dbad54ada913b63c415933dc6411d190000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000047ff5a796c9e01985b636161f375c0cb000000000000000000000000544e3f54cad02f469e4038c235a459f62c9a06aa00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000644d5c08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c0748b56c90e8b9ff77f4aee1c7234eb5abc0cb124b6e3176c066a8f7bec0f970d5d5b1e3eed26d2523b9da04c3aa85f4b670971537b154390981dea41128be1c4000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005af0d9827e0c53e4799bb226655a1de152a425a5000000000000000000000000000000000000000000000000000000000000237a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b5e3af16b1880000f22200ba6f436a09a95767bb4349bbebd036e791f292453aa01e33510e1a3a32000000000000000000000000f849de01b080adc3a814fabe1e2087475cf2ed823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d4da48b";

        vm.prank(_buyer);
        aggregator.execute{value: price}({
            tokenTransfers: new TokenTransfer[](0),
            tradeData: tradeData,
            originator: address(0),
            recipient: _buyer,
            isAtomic: false
        });

        assertEq(IERC721(MILADY).ownerOf(9082), _buyer);
        assertEq(IERC721(MILADY).ownerOf(7129), _buyer);
        assertEq(IERC721(MILADY).balanceOf(_buyer), 2);
        assertEq(_buyer.balance, 0);
    }

    function test_execute_RevertIf_InvalidOrderLength() public {
        uint256 price = 0x02b5e3af16b1880000;
        vm.deal(_buyer, price);
        ILooksRareAggregator.TradeData[] memory tradeData = new ILooksRareAggregator.TradeData[](1);
        tradeData[0].proxy = address(reservoirProxy);
        tradeData[0].selector = ReservoirProxy.execute.selector;
        tradeData[0].extraData = _singleX2Y2OrderCalldata();

        vm.prank(_buyer);
        vm.expectRevert(InvalidOrderLength.selector);
        aggregator.execute{value: price}({
            tokenTransfers: new TokenTransfer[](0),
            tradeData: tradeData,
            originator: address(0),
            recipient: _buyer,
            isAtomic: true
        });
    }

    function test_execute_RevertIf_InvalidCaller() public {
        reservoirProxy = new ReservoirProxy(RESERVOIR_ROUTER, address(1));
        aggregator.addFunction(address(reservoirProxy), ReservoirProxy.execute.selector);

        uint256 price = 0x02b5e3af16b1880000;
        vm.deal(_buyer, price);
        BasicOrder[] memory orders = new BasicOrder[](1);
        orders[0].price = price;
        ILooksRareAggregator.TradeData[] memory tradeData = new ILooksRareAggregator.TradeData[](1);
        tradeData[0].orders = orders;
        tradeData[0].proxy = address(reservoirProxy);
        tradeData[0].selector = ReservoirProxy.execute.selector;
        tradeData[0].extraData = _singleX2Y2OrderCalldata();

        vm.prank(_buyer);
        vm.expectRevert(IProxy.InvalidCaller.selector);
        aggregator.execute{value: price}({
            tokenTransfers: new TokenTransfer[](0),
            tradeData: tradeData,
            originator: address(0),
            recipient: _buyer,
            isAtomic: true
        });
    }

    function _singleX2Y2OrderCalldata() private pure returns (bytes memory) {
        return
            hex"760f2a0b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007562e6d5d901ece54a89530f1c8d63e7cfaeebff0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000000000000000007847ca9694300000000000000000000000000000000000000000000000000000000000000c000000000000000000000000038dee936aa3d8e6370524a7cba38c96a896d9d9f00000000000000000000000038dee936aa3d8e6370524a7cba38c96a896d9d9f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000002b5e3af16b1880000000000000000000000000000000000000000000000000000000000000000076000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000181286025c41e0000000000000000000000000000000000000000000000000000000064457b16000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007562e6d5d901ece54a89530f1c8d63e7cfaeebff0000000000000000000000000000000000000000000000000000000000000000becae754057819f5f396151a3f6ac41c2a961cdd9d82edb20974e1ea97b5c8e2220e5cdfff3626fdbed4a18fe28c383e22833cedbedc5b121ce665ecc70f3222000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000047ff5a796c9e01985b636161f375c0cb000000000000000000000000544e3f54cad02f469e4038c235a459f62c9a06aa00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000644d5c08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c0748b56c90e8b9ff77f4aee1c7234eb5abc0cb124b6e3176c066a8f7bec0f970d5d5b1e3eed26d2523b9da04c3aa85f4b670971537b154390981dea41128be1c4000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005af0d9827e0c53e4799bb226655a1de152a425a5000000000000000000000000000000000000000000000000000000000000237a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b5e3af16b1880000f22200ba6f436a09a95767bb4349bbebd036e791f292453aa01e33510e1a3a32000000000000000000000000f849de01b080adc3a814fabe1e2087475cf2ed823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d4da48b";
    }
}
